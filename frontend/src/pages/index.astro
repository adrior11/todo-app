---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';

const response = await fetch('http://localhost:3000/todo');
const todos = await response.json();
---

<html>
    <head>
        <title>Todo App</title>
        <style>
            body {
                font-family: 'Arial', sans-serif;
                background-color: #f9f9f9;
                margin: 0;
                padding: 20px;
            }

            h1 {
                color: #333;
                display: inline-block;
            }

            .todo-container {
                max-width: 600px;
                margin: auto;
                background: white;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                padding: 20px;
            }

            .header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 20px;
            }

            .input-container {
                display: flex;
                justify-content: space-between;
                margin-bottom: 20px;
            }

            input[type="text"] {
                flex: 1;
                padding: 10px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 16px;
                margin-right: 10px;
            }

            button {
                padding: 10px 15px;
                background-color: #FF9505;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-size: 16px;
            }

            button:hover {
                background-color: #FCF7F8;
                color: #FF9505;
            }

            .delete-button {
                background-color: #FCF7F8;
                color: #EF767A;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                padding: 5px 10px;
                font-size: 16px;
            }

            .delete-button:hover {
                background-color: #EF767A;
                color: #FCF7F8;
            }

            ul {
                list-style: none;
                padding: 0;
            }

            li {
                display: flex;
                align-items: center;
                padding: 10px;
                border-bottom: 1px solid #eee;
                margin-bottom: 10px;
            }

            .todo-checkbox {
                margin-right: 10px;
            }

            label {
                flex: 1;
                cursor: pointer;
                font-size: 16px;
                color: #333;
            }

            .completed {
                text-decoration: line-through;
                color: #aaa;
            }
        </style>
    </head>
    <body>
        <div class="todo-container">
            <div class="header">
                <h1>Todo List</h1>
                <button class="delete-button" id="clearTodosButton">Clear All</button>
            </div>

            <!-- Input field for adding a new todo -->
            <div class="input-container">
                <input type="text" id="newTodoDescription" placeholder="Enter a new todo" />
                <button id="addTodoButton">Add Todo</button>
            </div>

            <!-- Todo list rendering -->
            {todos.length === 0 ? (
                <p>No todos found.</p>
            ) : (
                <ul>
                    {todos.map(todo => (
                        <li key={todo._id}>
                            <!-- Checkbox for toggling todo completion -->
                            <input 
                                type="checkbox"
                                id={`checkbox-${todo._id}`}
                                class="todo-checkbox"
                                data-id={todo._id}
                                checked={todo.completed}
                                onchange="this.parentNode.querySelector('label').classList.toggle('completed', this.checked)"
                            />

                            <!-- Todo description -->
                            <label for={`checkbox-${todo._id}`} class={todo.completed ? 'completed' : ''}>
                                {todo.description}
                            </label>
                        </li>
                    ))}
                </ul>
            )}
        </div>

        <script>
            // Function to handle adding a new todo
            document.getElementById('addTodoButton').addEventListener('click', async () => {
                const description = document.getElementById('newTodoDescription').value;

                if (!description) {
                    alert('Please enter a todo description');
                    return;
                }

                try {
                    const response = await fetch('http://localhost:3000/todo', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ description }),
                    });

                    if (response.ok) {
                        const newTodo = await response.json();
                        console.log('New todo added:', newTodo);
                        window.location.reload();
                    } else {
                        const error = await response.text();
                        console.error('Error adding todo:', error);
                        alert('Error adding todo');
                    }
                } catch (err) {
                    console.log('Request failed', err);
                    alert('Failed to send request. Please try again.');
                }
            });

            // Function to handle checkbox toggle for updating todo completion
            document.querySelectorAll('.todo-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', async (event) => {
                    const todoId = event.target.getAttribute('data-id');
                    const isCompleted = event.target.checked;

                    // Toggle the completed class on the corresponding label
                    event.target.parentNode.querySelector('label').classList.toggle('completed', isCompleted);

                    try {
                        const response = await fetch(`http://localhost:3000/todo/${todoId}`, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ completed: isCompleted }),
                        });

                        if (!response.ok) {
                            const error = await response.text();
                            console.error('Error updating todo:', error);
                            alert('Error updating todo');
                        }
                    } catch (err) {
                        console.error('Request failed', err);
                        alert('Failed to send request. Please try again.');
                    }
                });
            });

            // Function to clear all todos
            document.getElementById('clearTodosButton').addEventListener('click', async () => {
                if (confirm('Are you sure you want to clear all todos?')) {
                    try {
                        const response = await fetch('http://localhost:3000/todo', {
                            method: 'DELETE',
                        });

                        if (response.ok) {
                            console.log('All todos cleared');
                            window.location.reload();
                        } else {
                            const error = await response.text();
                            console.error('Error clearing todos:', error);
                            alert('Error clearing todos');
                        }
                    } catch (err) {
                        console.error('Request failed', err);
                        alert('Failed to send request. Please try again.');
                    }
                }
            });
        </script>
    </body>
</html>

